using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using SpaceBattleGame.Contracts.Commands;
using SpaceBattleGame.Contracts.Common;
using System.Reflection;
using System.Runtime.Loader;

namespace IoC
{
    public static class Compiler
    {
        public static T CompileAndCreateAdapter<T>(string codeToCompile, string classAdapterName, IUObject obj)
        {
            var references = new MetadataReference[]
            {
                MetadataReference.CreateFromFile(typeof(Object).Assembly.Location),
                MetadataReference.CreateFromFile(Assembly.Load(new AssemblyName("System.Runtime")).Location),
                MetadataReference.CreateFromFile(typeof(IoC).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(ICommand).Assembly.Location)
            };

            var compilation = CSharpCompilation.Create(classAdapterName)
                                .WithOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
                                .AddReferences(references)
                                .AddSyntaxTrees(CSharpSyntaxTree.ParseText(codeToCompile));

            using (var memoryStream = new MemoryStream())
            {
                var emitResult = compilation.Emit(memoryStream);
                if (emitResult.Success)
                {
                    memoryStream.Seek(0, SeekOrigin.Begin);

                    Assembly assembly = AssemblyLoadContext.Default.LoadFromStream(memoryStream);

                    var type = assembly.GetType(classAdapterName);
                    ConstructorInfo ctor = type.GetConstructors().FirstOrDefault();
                    T instance = (T)ctor.Invoke(new object[] { obj });

                    return instance;
                }
                else
                {
                    throw new Exception("Compile error for autogenerated adapter");
                }
            }
        }
    }    
}
